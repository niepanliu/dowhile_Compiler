#ifndef _COMMEN_H
#define _COMMEN_H

#include <regex.h>

enum TYPE {
    number, variable, 
};

int tempindex = 63;

enum token {
    Keywords_t, Identifiers_t, Operators_t, Delimiters_t, Constants_t, space_t,
    void_t, char_t, int_t, float_t, double_t, short_t, long_t, signed_t,
    unsigned_t, struct_t, union_t, enum_t, typedef_t, sizeof_t, auto_t,
    static_t, regist_t, extern_t, const_t, return_t, continue_t, break_t,
    goto_t, ret_t, if_t, switch_t, case_t, default_t, for_t, do_t, 
    while_t, number_t, function_t, value_t, equal_t, leftbigbrace_t,
    rightbigbrace_t, leftminibrace_t, rightminibrace_t, end_t, comma_t,
    assignment_t, not_t, sub_t, add_t, mul_t, division_t, rediv_t, logicand_t,
    logicor_t, or_t, and_t, mod_t, bigger_t, less_t, bigandequal_t, lessandequal_t,
};

struct Token {
    char data[64];
    int type;
};

struct rule {
    const char* regex;
    int toke_type;
} rules[] = {
    // {"void", Keywords_t},
    // {"char", Keywords_t},
    // {"int", Keywords_t},
    // {"float", Keywords_t},
    // {"double", Keywords_t},
    // {"short", Keywords_t},
    // {"long", Keywords_t},
    // {"signed", Keywords_t},
    // {"unsigned", Keywords_t},
    // {"struct", Keywords_t},
    // {"union", Keywords_t},
    // {"enum", Keywords_t},
    // {"typedef", Keywords_t},
    // {"sizeof", Keywords_t},
    // {"auto", Keywords_t},
    // {"static", Keywords_t},
    // {"register", Keywords_t},
    // {"extern", Keywords_t},
    // {"const", Keywords_t},
    // {"return", Keywords_t},
    // {"continue", Keywords_t},
    // {"break", Keywords_t},
    // {"goto", Keywords_t},
    // {"return", Keywords_t},
    // {"if", Keywords_t},
    // {"switch", Keywords_t},
    // {"case", Keywords_t},
    // {"default", Keywords_t},
    // {"for", Keywords_t},
    // {"do", Keywords_t},
    // {"while", Keywords_t},
    // {"[\n ]+", space_t},
    // {"[0-9]+", Constants_t},
    // {"\".*\"",Constants_t},
    // {"[_a-zA-Z]+", Identifiers_t},
    // {"\\{", Delimiters_t},
    // {"\\}", Delimiters_t},
    // {";", Delimiters_t},
    // {"\\(", Delimiters_t},
    // {"\\)", Delimiters_t},
    // {",", Delimiters_t},
    // {"==", Operators_t},
    // {"=", Operators_t},
    // {"!", Operators_t},
    // {"\\-", Operators_t},
    // {"\\+", Operators_t},
    // {"\\*", Operators_t},
    // {"\\/", Operators_t},
    // {"////", Operators_t},
    // {"&&", Operators_t},
    // {"&", Operators_t},
    // {"%", Operators_t},
    {"void", void_t},
    {"char", char_t},
    {"int", int_t},
    {"float", float_t},
    {"double", double_t},
    {"short", short_t},
    {"long", long_t},
    {"signed", signed_t},
    {"unsigned", unsigned_t},
    {"struct", struct_t},
    {"union", union_t},
    {"enum", enum_t},
    {"typedef", typedef_t},
    {"sizeof", signed_t},
    {"auto", auto_t},
    {"static", static_t},
    {"register", regist_t},
    {"extern", extern_t},
    {"const", const_t},
    {"return", return_t},
    {"continue", continue_t},
    {"break", break_t},
    {"goto", goto_t},
    {"if", if_t},
    {"switch", switch_t},
    {"case", case_t},
    {"default", default_t},
    {"for", for_t},
    {"do", do_t},
    {"while", while_t},
    {"[\n ]+", space_t},
    {"[0-9]+", Constants_t},
    {"\".*\"",Constants_t},
    {"[_a-zA-Z]+", Identifiers_t},
    {"\\{", leftbigbrace_t},
    {"\\}", rightbigbrace_t},
    {";", end_t},
    {"\\(", leftminibrace_t},
    {"\\)", rightminibrace_t},
    {",", comma_t},
    {"==", equal_t},
    {"=", assignment_t},
    {"!", not_t},
    {"\\-", sub_t},
    {"\\+", add_t},
    {"\\*", mul_t},
    {"\\/", division_t},
    {"////", rediv_t},
    {"&&", logicand_t},
    {"\\|\\|", logicor_t},
    {"\\|", or_t},
    {"&", and_t},
    {"%", mod_t},
    {">=", bigandequal_t},
    {"<=", lessandequal_t},
    {">", bigger_t},
    {"<", less_t},
    
};

#endif